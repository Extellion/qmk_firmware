#!/usr/bin/env python3
"""CLI wrapper for running QMK commands.
"""
import os
import subprocess
import sys
from glob import glob
from importlib import import_module
from importlib.util import find_spec
from time import strftime

# Add the QMK python libs to our path
script_dir = os.path.dirname(os.path.realpath(__file__))
qmk_dir = os.path.abspath(os.path.join(script_dir, '..'))
python_lib_dir = os.path.abspath(os.path.join(qmk_dir, 'lib', 'python'))
sys.path.append(python_lib_dir)

# Make sure our modules have been setup
with open(os.path.join(qmk_dir, 'requirements.txt'), 'r') as fd:
    for line in fd.readlines():
        line = line.strip().replace('<', '=').replace('>', '=')

        if line[0] == '#':
            continue

        if '#' in line:
            line = line.split('#')[0]

        module = line.split('=')[0] if '=' in line else line
        if not find_spec(module):
            print('Could not find module %s!', module)
            print('Please run `pip3 install -r requirements.txt` to install the python dependencies.')
            exit(255)

# Setup the CLI
import milc
from qmk.path import subcommand_modules

SUBCOMMAND_BLACKLIST = ['qmk.cli.subcommands']
milc.EMOJI_LOGLEVELS['INFO'] = '{fg_blue}Î¨{style_reset_all}'


@milc.cli.entrypoint('QMK Helper Script')
def qmk_main(cli):
    """The function that gets run when no subcommand is provided.
    """
    cli.print_help()


def main():
    """Setup our environment and then call the CLI entrypoint.
    """
    # Change to the root of our checkout
    os.environ['ORIG_CWD'] = os.getcwd()
    os.chdir(qmk_dir)

    # Figure out our version
    command = ['git', 'describe', '--abbrev=6', '--dirty', '--always', '--tags']
    result = subprocess.run(command, universal_newlines=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

    if result.returncode == 0:
        os.environ['QMK_VERSION'] = result.stdout.strip()
    else:
        os.environ['QMK_VERSION'] = 'nogit-' + strftime('%Y-%m-%d-%H:%M:%S') + '-dirty'

    # Look for which module to import
    subcommand = None
    for count, arg in enumerate(sys.argv[1:]):
        if arg and arg[0] != '-':
            sys.argv[count+1] = subcommand = arg.replace('-', '_')
            subcommand = subcommand.replace('_', '.')
            break

    if not subcommand:
        # Import all the subcommand modules so --help works correctly
        for subcommand_module in subcommand_modules():
            if subcommand_module in SUBCOMMAND_BLACKLIST:
                continue

            try:
                import_module(subcommand_module)
            except ModuleNotFoundError as e:
                if e.name != subcommand_module:
                    raise
    else:
        # Import only the subcommand module we care about for faster startup
        subcommand = 'qmk.cli.' + subcommand

        try:
            import_module(subcommand)
        except ModuleNotFoundError as e:
            if e.name != subcommand:
                raise

            milc.cli.log.error('Invalid subcommand! Could not import %s.', subcommand)
            exit(1)

    return_code = milc.cli()

    if return_code is False:
        exit(1)

    elif isinstance(return_code, int):
        if return_code < 0 or return_code > 255:
            milc.cli.log.error('Invalid return_code: %d', return_code)
            exit(255)

        exit(return_code)

    exit(0)

if __name__ == '__main__':
    main()
